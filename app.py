import streamlit as st
import numpy as np
import librosa
import tensorflow as tf
import time
import scipy.signal as signal
import pyaudio
import tempfile
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
SAMPLE_RATE = 22050
CHUNK = 1024  

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
if 'model' not in st.session_state:
    st.session_state.model = tf.keras.models.load_model("MelNoteClassifierV6.h5")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á MIDI ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ô‡πâ‡∏ï
def midi_to_note(midi):
    note_names = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
    octave = midi // 12 - 1
    note = note_names[midi % 12]
    return f"{note}{octave}"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ RMS
def rms_value(audio_data):
    return np.sqrt(np.mean(np.square(audio_data)))

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Noise Gate
def noise_gate(audio_data, threshold=0.02):
    return np.where(np.abs(audio_data) >= threshold, audio_data, 0)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Bandpass Filter
def bandpass_filter(audio_data, low_cutoff=90, high_cutoff=8000, sample_rate=22050, order=3):
    nyquist = 0.5 * sample_rate
    low = low_cutoff / nyquist
    high = high_cutoff / nyquist
    b, a = signal.butter(order, [low, high], btype='band')
    return signal.filtfilt(b, a, audio_data)

def extract_mel_spectrogram(audio_data, sr=22050):
    """ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô Mel Spectrogram """
    mel = librosa.feature.melspectrogram(y=audio_data, sr=sr, n_mels=128, fmax=8000)
    mel = np.maximum(mel, 0)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö

    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á Mel Spectrogram ‡πÄ‡∏õ‡πá‡∏ô (128, 128)
    mel_resized = librosa.util.fix_length(mel, size=128, axis=-1)  # padding ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î
    mel_resized = librosa.util.fix_length(mel_resized, size=128, axis=-2)  # padding ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î
    return mel_resized

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏ô‡πâ‡∏ï‡∏à‡∏≤‡∏Å Mel spectrogram
def predict_note(mel_input):
    if mel_input is None:
        return None
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô (1, 128, 128, 1)
    mel_input_resized = np.reshape(mel_input, (1, 128, 128, 1))
    
    predicted = st.session_state.model.predict(mel_input_resized)
    predicted_midi = np.argmax(predicted)
    return midi_to_note(predicted_midi)

# üéµ UI ‡∏Ç‡∏≠‡∏á Streamlit
st.title("üéµ Note Detection (‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô & ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á)")
st.write("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")

# ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á:", ("üé§ ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô", "üìÇ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á"))

# üé§ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
if option == "üé§ ‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô":
    st.write("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô")

    # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ü‡∏ô
    audio = pyaudio.PyAudio()
    stream = audio.open(format=pyaudio.paFloat32, channels=1, rate=SAMPLE_RATE, 
                        input=True, frames_per_buffer=CHUNK)

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if st.button("üé§ ‡πÄ‡∏£‡∏¥‡πà‡∏° / ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"):
        st.session_state.is_recording = not st.session_state.get("is_recording", False)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏ô‡πâ‡∏ï‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    note_placeholder = st.empty()

    if st.session_state.get("is_recording", False):
        st.write("üéôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")

        while True:
            audio_data = np.frombuffer(stream.read(CHUNK, exception_on_overflow=False), dtype=np.float32)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ RMS
            rms = rms_value(audio_data)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if rms < 0.02:  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold ‡∏Ç‡∏≠‡∏á RMS ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                note_placeholder.markdown(""" 
                <div style="text-align: center;">
                    <div style="border: 2px solid #BB86FC; padding: 20px; border-radius: 10px; 
                                background-color: #333333; color: #FFFFFF; font-size: 24px;">
                        üîá ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                mel_spectrogram = extract_mel_spectrogram(audio_data)
                note = predict_note(mel_spectrogram)

                if note:
                    note_placeholder.markdown(f"""
                    <div style="text-align: center;">
                        <div style="border: 2px solid #BB86FC; padding: 20px; border-radius: 10px; 
                                    background-color: #333333; color: #FFFFFF; font-size: 24px;">
                            üé∂ ‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ: <strong>{note}</strong>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    note_placeholder.markdown(""" 
                    <div style="text-align: center;">
                        <div style="border: 2px solid #BB86FC; padding: 20px; border-radius: 10px; 
                                    background-color: #333333; color: #FFFFFF; font-size: 24px;">
                            üîá ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
                        </div>
                    </div>
                    """, unsafe_allow_html=True)

            time.sleep(0.1)

        stream.stop_stream()
        stream.close()
        audio.terminate()

# üìÇ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
elif option == "üìÇ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á":
    uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (wav, mp3)", type=["wav", "mp3"])

    if uploaded_file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
            temp_file.write(uploaded_file.getvalue())
            temp_filename = temp_file.name  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

        try:
            # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            audio_data, _ = librosa.load(temp_filename, sr=SAMPLE_RATE)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if len(audio_data) == 0 or np.max(np.abs(audio_data)) < 0.001:
                st.warning("üîá ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ")
            else:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Mel Spectrogram
                mel_spectrogram = extract_mel_spectrogram(audio_data)
                
                # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                note = predict_note(mel_spectrogram)

                if note:
                    st.success(f"üé∂ ‡πÇ‡∏ô‡πâ‡∏ï‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {note}")
                else:
                    st.warning("üîá ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ô‡πâ‡∏ï‡πÑ‡∏î‡πâ")

        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")

        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            os.remove(temp_filename)

# üé® **CSS Styling**
st.markdown("""
    <style>
        .stButton>button {
            background-color: #FF6347;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 15px 30px;
            font-size: 18px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            transition: background-color 0.3s ease;
        }
        .stButton>button:hover {
            background-color: #FF4500;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.7);
        }
        .note-box {
            text-align: center;
            border: 2px solid #BB86FC;
            padding: 20px;
            border-radius: 10px;
            background-color: #333333;
            font-size: 24px;
            font-weight: bold;
            color: #FFFFFF;
            transition: background-color 0.3s ease;
        }
    </style>
""", unsafe_allow_html=True)
